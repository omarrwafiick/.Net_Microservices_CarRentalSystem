// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleServiceApi.Data;

#nullable disable

namespace VehicleServiceApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VehicleServiceApi.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75f04c79-6d03-4ecd-8da2-f38653441dfb"),
                            DailyRate = 50.00m,
                            IsAvailable = true,
                            LicensePlate = "ABC1234",
                            Location = "New York",
                            Make = "Toyota",
                            Model = "Corolla",
                            Type = "Sedan",
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("70bfc2b0-cdf6-48ca-a7bd-ab74c4352d90"),
                            DailyRate = 55.00m,
                            IsAvailable = true,
                            LicensePlate = "XYZ5678",
                            Location = "Los Angeles",
                            Make = "Honda",
                            Model = "Civic",
                            Type = "Sedan",
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("57bd4a67-2136-49b4-9e9c-56d1ce150c33"),
                            DailyRate = 80.00m,
                            IsAvailable = true,
                            LicensePlate = "LMN9876",
                            Location = "Chicago",
                            Make = "Ford",
                            Model = "F-150",
                            Type = "Truck",
                            Year = 2022
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
